{"ast":null,"code":"var _jsxFileName = \"D:\\\\VinetiWorkSpace\\\\final-project-GG\\\\src\\\\components\\\\Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Switch from '../utils/headerButtonSwitch';\nimport { headerButtons } from '../utils/configs';\nimport { logout } from '../utils/API';\nimport { ChangeActionLoggedIn, ChangeActionLoading, mapStateToProps } from '../redux/actions';\nimport { HeaderButton } from './Buttons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = props => {\n  _s();\n\n  const {\n    appState,\n    dispatch\n  } = props;\n  const state = appState;\n  const location = useLocation();\n  const history = useHistory();\n  const [buttons, setButtons] = useState(headerButtons.loggedOut);\n  useEffect(() => {\n    if (state.isLoading === false) {\n      if (state.loggedIn) {\n        setButtons(headerButtons.loggedIn);\n      } else {\n        setButtons(headerButtons.loggedOut);\n      }\n    }\n  }, [state.loggedIn]);\n\n  const onSelect = async (event, button) => {\n    if (event.metaKey || event.ctrlKey) {\n      return;\n    }\n\n    if (button === 'Logout') {\n      dispatch(ChangeActionLoading({\n        isLoading: true\n      }));\n      await logout().then(() => dispatch(ChangeActionLoggedIn({\n        isLoading: false,\n        loggedIn: false,\n        userType: '',\n        userId: ''\n      }))).then();\n    }\n\n    history.push(Switch(button, location, state));\n  };\n\n  const button = buttons.map(item => /*#__PURE__*/_jsxDEV(HeaderButton, {\n    button: item,\n    onSelect: onSelect,\n    className: \"header\"\n  }, props.button, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"navbar navbar-dark bg-dark\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"navbar-brand\",\n        children: \"GG Clone App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"d-flex\",\n        children: button\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Header, \"ZD92A0igNBVvnHtLn/iao74+5+M=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = Header;\nHeader.propTypes = {\n  appState: PropTypes.element.isRequired,\n  dispatch: PropTypes.element.isRequired,\n  button: PropTypes.element.isRequired\n};\nexport default connect(mapStateToProps)(Header);\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["D:/VinetiWorkSpace/final-project-GG/src/components/Header.js"],"names":["React","useEffect","useState","useHistory","useLocation","connect","PropTypes","Switch","headerButtons","logout","ChangeActionLoggedIn","ChangeActionLoading","mapStateToProps","HeaderButton","Header","props","appState","dispatch","state","location","history","buttons","setButtons","loggedOut","isLoading","loggedIn","onSelect","event","button","metaKey","ctrlKey","then","userType","userId","push","map","item","propTypes","element","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Switch from '../utils/headerButtonSwitch';\nimport { headerButtons } from '../utils/configs';\nimport { logout } from '../utils/API';\nimport {\n  ChangeActionLoggedIn,\n  ChangeActionLoading,\n  mapStateToProps,\n} from '../redux/actions';\nimport { HeaderButton } from './Buttons';\n\nconst Header = (props) => {\n  const { appState, dispatch } = props;\n  const state = appState;\n  const location = useLocation();\n  const history = useHistory();\n  const [buttons, setButtons] = useState(headerButtons.loggedOut);\n\n  useEffect(() => {\n    if (state.isLoading === false) {\n      if (state.loggedIn) {\n        setButtons(headerButtons.loggedIn);\n      } else {\n        setButtons(headerButtons.loggedOut);\n      }\n    }\n  }, [state.loggedIn]);\n\n  const onSelect = async (event, button) => {\n    if (event.metaKey || event.ctrlKey) {\n      return;\n    }\n    if (button === 'Logout') {\n      dispatch(ChangeActionLoading({ isLoading: true }));\n      await logout()\n        .then(() => dispatch(ChangeActionLoggedIn({\n          isLoading: false,\n          loggedIn: false,\n          userType: '',\n          userId: '',\n        })))\n        .then();\n    }\n    history.push(Switch(button, location, state));\n  };\n\n  const button = buttons.map((item) => (\n    <HeaderButton\n      key={props.button}\n      button={item}\n      onSelect={onSelect}\n      className=\"header\"\n    />\n  ));\n\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <div className=\"container-fluid\">\n        <p className=\"navbar-brand\">GG Clone App</p>\n        <form className=\"d-flex\">\n          {button}\n        </form>\n      </div>\n    </nav>\n  );\n};\n\nHeader.propTypes = {\n  appState: PropTypes.element.isRequired,\n  dispatch: PropTypes.element.isRequired,\n  button: PropTypes.element.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n"]},"metadata":{},"sourceType":"module"}