{"ast":null,"code":"var _jsxFileName = \"D:\\\\VinetiWorkSpace\\\\final-project-GG\\\\src\\\\components\\\\Driver\\\\DriverLogin.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { login } from '../../utils/API';\nimport { loginParams } from \"../../utils/configs\";\nimport { ChangeActionLoading, ChangeActionLoggedIn, ChangeActionAlert, mapStateToProps } from '../../redux/actions';\nimport { connect } from \"react-redux\";\nimport LoginForm from \"../LoginForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DriverLogin = props => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = props.dispatch;\n  const state = props.appState;\n  const [fields, setFields] = useState({ ...loginParams,\n    model_name: 'Driver'\n  });\n\n  const onClick = event => {\n    event.preventDefault();\n    Login(event).then();\n  };\n\n  const Login = async event => {\n    dispatch(ChangeActionLoading({\n      'isLoading': true\n    }));\n    const params = {\n      session: { ...fields,\n        remember_me: fields.remember_me === true ? '1' : '0'\n      }\n    };\n    await login(params).then(response => {\n      dispatch(ChangeActionLoggedIn({ ...state,\n        'isLoading': false,\n        'loggedIn': true,\n        'userType': response.data.model_name,\n        'userId': response.data.user.id,\n        'alert': ''\n      }));\n      history.push(`/${response.data.model_name}/${response.data.user.id}`);\n    }).catch(response => {\n      dispatch(ChangeActionLoading(false));\n      dispatch(ChangeActionAlert(response.message));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(LoginForm, {\n      fields: fields,\n      setFields: setFields,\n      onClick: onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n\n_s(DriverLogin, \"ypnvGs21MzR9xOekIYQ+7Ym8aaM=\", false, function () {\n  return [useHistory];\n});\n\n_c = DriverLogin;\nexport default connect(mapStateToProps)(DriverLogin);\n\nvar _c;\n\n$RefreshReg$(_c, \"DriverLogin\");","map":{"version":3,"sources":["D:/VinetiWorkSpace/final-project-GG/src/components/Driver/DriverLogin.js"],"names":["React","useState","useEffect","useHistory","login","loginParams","ChangeActionLoading","ChangeActionLoggedIn","ChangeActionAlert","mapStateToProps","connect","LoginForm","DriverLogin","props","history","dispatch","state","appState","fields","setFields","model_name","onClick","event","preventDefault","Login","then","params","session","remember_me","response","data","user","id","push","catch","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAAQC,mBAAR,EACQC,oBADR,EAEQC,iBAFR,EAGQC,eAHR,QAG8B,qBAH9B;AAIA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,OAAO,GAAGX,UAAU,EAA1B;AACA,QAAMY,QAAQ,GAAGF,KAAK,CAACE,QAAvB;AACA,QAAMC,KAAK,GAAGH,KAAK,CAACI,QAApB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EACjC,GAAGI,WAD8B;AAEjCe,IAAAA,UAAU,EAAE;AAFqB,GAAD,CAApC;;AAOE,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACzBA,IAAAA,KAAK,CAACC,cAAN;AACAC,IAAAA,KAAK,CAACF,KAAD,CAAL,CACGG,IADH;AAED,GAJD;;AAMA,QAAMD,KAAK,GAAG,MAAOF,KAAP,IAAiB;AAC7BP,IAAAA,QAAQ,CAACT,mBAAmB,CAAC;AAAC,mBAAa;AAAd,KAAD,CAApB,CAAR;AACA,UAAMoB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE,EACP,GAAGT,MADI;AAEPU,QAAAA,WAAW,EAAEV,MAAM,CAACU,WAAP,KAAuB,IAAvB,GAA8B,GAA9B,GAAmC;AAFzC;AADI,KAAf;AAMA,UAAMxB,KAAK,CAACsB,MAAD,CAAL,CACHD,IADG,CACEI,QAAQ,IAAI;AAChBd,MAAAA,QAAQ,CAACR,oBAAoB,CAAC,EAC5B,GAAGS,KADyB;AAE5B,qBAAa,KAFe;AAG5B,oBAAY,IAHgB;AAI5B,oBAAYa,QAAQ,CAACC,IAAT,CAAcV,UAJE;AAK5B,kBAAUS,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmBC,EALD;AAM5B,iBAAS;AANmB,OAAD,CAArB,CAAR;AAQAlB,MAAAA,OAAO,CAACmB,IAAR,CAAc,IAAGJ,QAAQ,CAACC,IAAT,CAAcV,UAAW,IAAGS,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmBC,EAAG,EAAnE;AACD,KAXG,EAYHE,KAZG,CAYGL,QAAQ,IAAI;AACjBd,MAAAA,QAAQ,CAACT,mBAAmB,CAAC,KAAD,CAApB,CAAR;AACAS,MAAAA,QAAQ,CAACP,iBAAiB,CAACqB,QAAQ,CAACM,OAAV,CAAlB,CAAR;AACD,KAfG,CAAN;AAgBD,GAxBD;;AA0BA,sBACI;AAAA,2BAEE,QAAC,SAAD;AAAW,MAAA,MAAM,EAAEjB,MAAnB;AAA2B,MAAA,SAAS,EAAEC,SAAtC;AAAiD,MAAA,OAAO,EAAEE;AAA1D;AAAA;AAAA;AAAA;AAAA;AAFF,mBADJ;AAMH,CAjDD;;GAAMT,W;UACYT,U;;;KADZS,W;AAmDN,eAAeF,OAAO,CAACD,eAAD,CAAP,CAAyBG,WAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { login } from '../../utils/API';\r\nimport { loginParams } from \"../../utils/configs\";\r\nimport {ChangeActionLoading,\r\n        ChangeActionLoggedIn,\r\n        ChangeActionAlert,\r\n        mapStateToProps} from '../../redux/actions';\r\nimport {connect} from \"react-redux\";\r\nimport LoginForm from \"../LoginForm\";\r\n\r\nconst DriverLogin = (props) => {\r\n  const history = useHistory()\r\n  const dispatch = props.dispatch\r\n  const state = props.appState\r\n  const [fields, setFields] = useState({\r\n      ...loginParams,\r\n      model_name: 'Driver'\r\n  })\r\n  \r\n  \r\n\r\n    const onClick = (event) => {\r\n      event.preventDefault();\r\n      Login(event)\r\n        .then()\r\n    }\r\n    \r\n    const Login = async (event) => {\r\n      dispatch(ChangeActionLoading({'isLoading': true}))\r\n      const params = {\r\n        session: {\r\n          ...fields,\r\n          remember_me: fields.remember_me === true ? '1': '0'\r\n        }\r\n      }\r\n      await login(params)\r\n        .then(response => {\r\n          dispatch(ChangeActionLoggedIn({\r\n            ...state,\r\n            'isLoading': false,\r\n            'loggedIn': true,\r\n            'userType': response.data.model_name,\r\n            'userId': response.data.user.id,\r\n            'alert': ''\r\n          }))\r\n          history.push(`/${response.data.model_name}/${response.data.user.id}`)\r\n        })\r\n        .catch(response => {\r\n          dispatch(ChangeActionLoading(false))\r\n          dispatch(ChangeActionAlert(response.message))\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n          {/*<ErrorMessages Errors={}/>*/}\r\n          <LoginForm fields={fields} setFields={setFields} onClick={onClick} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps)(DriverLogin)\r\n"]},"metadata":{},"sourceType":"module"}