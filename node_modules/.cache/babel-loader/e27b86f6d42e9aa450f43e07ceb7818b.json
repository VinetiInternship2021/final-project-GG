{"ast":null,"code":"var _jsxFileName = \"D:\\\\VinetiWorkSpace\\\\final-project-GG\\\\src\\\\components\\\\App.js\";\nimport React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport AppRoutes from './AppRoutes';\nimport { createStore } from 'redux';\nimport { connect, Provider } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ACTION_CHANGE_LOGGED_IN = 'ACTION_CHANGE_LOGGED_IN';\nconst ACTION_CHANGE_LOADING = 'ACTION_CHANGE_LOADING';\nconst initState = {\n  'isLoading': true,\n  'loggedIn': false,\n  'userType': '',\n  'userId': ''\n};\n\nconst rootReducer = (state = initState, action) => {\n  switch (action.type) {\n    case ACTION_CHANGE_LOGGED_IN:\n      return { ...state,\n        loggedIn: action.payload\n      };\n\n    case ACTION_CHANGE_LOADING:\n      return { ...state,\n        'isLoading': false,\n        'loggedIn': action.payload.loggedIn,\n        'userType': action.payload.userType,\n        'userId': action.payload.userId\n      };\n  }\n\n  return state;\n};\n\nconst store = createStore(rootReducer);\n\nconst mapStateToProps = state => {\n  const appState = state;\n  console.log(appState, ' redux mapState');\n  return {\n    appState\n  };\n};\n\nconst WrappedApp = connect(mapStateToProps)(AppRoutes);\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(WrappedApp, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/VinetiWorkSpace/final-project-GG/src/components/App.js"],"names":["React","BrowserRouter","AppRoutes","createStore","connect","Provider","ACTION_CHANGE_LOGGED_IN","ACTION_CHANGE_LOADING","initState","rootReducer","state","action","type","loggedIn","payload","userType","userId","store","mapStateToProps","appState","console","log","WrappedApp","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,aAAlC;;AAEA,MAAMC,uBAAuB,GAAG,yBAAhC;AACA,MAAMC,qBAAqB,GAAG,uBAA9B;AAEA,MAAMC,SAAS,GAAG;AAChB,eAAa,IADG;AAEhB,cAAY,KAFI;AAGhB,cAAY,EAHI;AAIhB,YAAU;AAJM,CAAlB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGF,SAAT,EAAoBG,MAApB,KAA+B;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,uBAAL;AACE,aAAO,EAAC,GAAGI,KAAJ;AAAWG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAA5B,OAAP;;AACF,SAAKP,qBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAEL,qBAAa,KAFR;AAGL,oBAAYC,MAAM,CAACG,OAAP,CAAeD,QAHtB;AAIL,oBAAYF,MAAM,CAACG,OAAP,CAAeC,QAJtB;AAKL,kBAAUJ,MAAM,CAACG,OAAP,CAAeE;AALpB,OAAP;AAJJ;;AAYA,SAAON,KAAP;AACD,CAdD;;AAgBA,MAAMO,KAAK,GAAGd,WAAW,CAACM,WAAD,CAAzB;;AAEA,MAAMS,eAAe,GAAIR,KAAD,IAAW;AACjC,QAAMS,QAAQ,GAAGT,KAAjB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAAsB,iBAAtB;AACA,SAAO;AACLA,IAAAA;AADK,GAAP;AAGD,CAND;;AAOA,MAAMG,UAAU,GAAGlB,OAAO,CAACc,eAAD,CAAP,CAAyBhB,SAAzB,CAAnB;;AAEA,MAAMqB,GAAG,GAAG,MAAM;AACd,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEN,KAAjB;AAAA,2BACE,QAAC,aAAD;AAAA,6BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOH,CARD;;KAAMM,G;AAUN,eAAeA,GAAf","sourcesContent":["import React from 'react'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport AppRoutes from './AppRoutes'\r\nimport { createStore } from 'redux'\r\nimport { connect, Provider } from 'react-redux'\r\n\r\nconst ACTION_CHANGE_LOGGED_IN = 'ACTION_CHANGE_LOGGED_IN'\r\nconst ACTION_CHANGE_LOADING = 'ACTION_CHANGE_LOADING'\r\n\r\nconst initState = {\r\n  'isLoading': true,\r\n  'loggedIn': false,\r\n  'userType': '',\r\n  'userId': ''\r\n}\r\nconst rootReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case ACTION_CHANGE_LOGGED_IN:\r\n      return {...state, loggedIn: action.payload}\r\n    case ACTION_CHANGE_LOADING:\r\n      return {\r\n        ...state,\r\n        'isLoading': false,\r\n        'loggedIn': action.payload.loggedIn,\r\n        'userType': action.payload.userType,\r\n        'userId': action.payload.userId\r\n      }\r\n  }\r\n  return state\r\n}\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nconst mapStateToProps = (state) => {\r\n  const appState = state\r\n  console.log(appState, ' redux mapState')\r\n  return {\r\n    appState\r\n  }\r\n}\r\nconst WrappedApp = connect(mapStateToProps)(AppRoutes)\r\n\r\nconst App = () => {\r\n    return (\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n            <WrappedApp />\r\n        </BrowserRouter>\r\n      </Provider>\r\n    )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}